"""Generator for strong_lines.*"""

# pylint: disable=duplicate-code

import csv
import json
import os
#import pprint
import re
import textwrap

from bs4 import BeautifulSoup
import requests

ELEMENT_URLS = {
    "Ar": "https://physics.nist.gov/PhysRefData/Handbook/Tables/argontable2_a.htm",
    "C": "https://www.physics.nist.gov/PhysRefData/Handbook/Tables/carbontable2_a.htm",
    "H": "https://physics.nist.gov/PhysRefData/Handbook/Tables/hydrogentable2_a.htm",
    "He": "https://physics.nist.gov/PhysRefData/Handbook/Tables/heliumtable2_a.htm",
    "Hg": "https://physics.nist.gov/PhysRefData/Handbook/Tables/mercurytable2_a.htm",
    "Kr": "https://physics.nist.gov/PhysRefData/Handbook/Tables/kryptontable2_a.htm",
    "N": "https://physics.nist.gov/PhysRefData/Handbook/Tables/nitrogentable2_a.htm",
    "Ne": "https://physics.nist.gov/PhysRefData/Handbook/Tables/neontable2_a.htm",
    "O": "https://physics.nist.gov/PhysRefData/Handbook/Tables/oxygentable2_a.htm",
    "Xe": "https://physics.nist.gov/PhysRefData/Handbook/Tables/xenontable2_a.htm"
}

def parse_pre_block(text):
    """Parses <pre> block from the html."""
    data = []
    for line in text.splitlines():
        match = re.match(r"^\s*(\d+)\s*([A-Za-z,*]*)\s+([\d.]+)", line)
        if match:
            intensity = int(match.group(1))
            flags = list(match.group(2)) if match.group(2) else []
            flags = ''.join([x for x in flags if x != ","])
            wavelength_aa = match.group(3)
            data.append([intensity, wavelength_aa, flags])

    return data

def extract_element_data_from_pre(url):
    """Exracts element data from the page."""
    response = requests.get(url, timeout=120)
    soup = BeautifulSoup(response.content, "html.parser")
    pre = soup.find("pre")
    if not pre:
        return []
    return parse_pre_block(pre.get_text())

def main():
    """C-like main."""
    full_data = {}
    for element, url in ELEMENT_URLS.items():
        print(f"Extracting {element}...")
        try:
            full_data[element] = extract_element_data_from_pre(url)
        except Exception as ex: # pylint: disable=broad-exception-caught
            print(f"Error extracting {element}: {ex}")
            full_data[element] = []

    #pprint.pprint(full_data)
    if False: # pylint: disable=using-constant-test
        with open("strong_lines.json", 'w', encoding='utf-8') as file:
            json.dump(full_data, file, indent=2)
        with open('strong_lines.csv', 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['element', 'intensity', 'wavelength', 'flags'])

            for element, data in full_data.items():
                for entry in data:
                    writer.writerow([element, entry[0], entry[1], entry[2]])

    py_output = os.path.abspath(os.path.join(
        os.path.dirname(os.path.abspath(__file__)),
        "../tobes_ui/strong_lines.py"))
    with open(py_output, 'w', encoding='utf-8') as pyfile:
        pyfile.write(textwrap.dedent("""        #!/usr/bin/env python3
        \"\"\"NIST strong lines, autogenerated by helpers/strong_lines_gen.py.\"\"\"

        # pylint: disable=too-many-lines

        from dataclasses import dataclass

        @dataclass
        class StrongLine:
            \"\"\"Represents one strong line for given element.\"\"\"
            element: str
            wavelength: float
            intensity: int
            flags: str

        @dataclass
        class StrongLines:
            \"\"\"Represents collection of strong lines for given element.\"\"\"
            element: str
            lines: list[StrongLine]
            persistent_lines: list[StrongLine] # lines with 'P' flag

        STRONG_LINES = {
        """))
        for element, data in full_data.items():
            lines = []
            persistent_lines = []
            for entry in data:
                line = (f'StrongLine(element="{element}", wavelength={entry[1]}, ' +
                        f'intensity={entry[0]}, flags="{entry[2]}"),')
                lines.append(line)
                if 'P' in entry:
                    persistent_lines.append(line)
            pyfile.write(f'    "{element}": StrongLines(\n')
            pyfile.write(f'        element="{element}",\n')
            pyfile.write('        lines=[\n')
            for line in lines:
                pyfile.write(f'            {line}\n')
            pyfile.write('        ],\n')
            pyfile.write('        persistent_lines=[\n')
            for line in persistent_lines:
                pyfile.write(f'            {line}\n')
            pyfile.write('        ]\n')
            pyfile.write('     ),\n')
        pyfile.write('}\n')
    print(f'Wrote: {py_output}')

main()

# Flags:
# b - band head
# c - complex
# d - line consists of two unresolved lines
# h - hazy
# l - shaded to longer wavelengths
# P - a persistent line
# r - easily reversed
# s - shaded to shorter wavelengths
# u - unresolved shoulder on strong line
# w - wide
# * - peaks so close that separate intensity measurement was infeasible
