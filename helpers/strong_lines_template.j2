#!/usr/bin/env python3
"""NIST strong lines, autogenerated by helpers/strong_lines_gen.py."""

# pylint: disable=too-many-lines

from dataclasses import dataclass

@dataclass
class StrongLine:
    """Represents one strong line for given element."""
    element: str
    wavelength: float
    intensity: int
    flags: str

@dataclass
class StrongLines:
    """Represents collection of strong lines for given element."""
    element: str
    lines: list[StrongLine]
    persistent_lines: list[StrongLine]  # lines with 'P' flag

    def for_range(self, rng, only_persistent):
        """Return list of lines for given range."""
        src = self.persistent_lines if only_persistent else self.lines
        return [x for x in src if rng.start <= x.wavelength <= rng.stop]

STRONG_LINES = {
{% for element, lines in full_data.items() %}
    "{{ element }}": StrongLines(
        element="{{ element }}",
        lines=[
        {%- for entry in lines %}
            StrongLine(element="{{ element }}", wavelength={{ entry[1] }}, intensity={{ entry[0] }}, flags="{{ entry[2] }}"),
        {%- endfor %}
        ],
        persistent_lines=[
        {%- for entry in lines if 'P' in entry[2] %}
            StrongLine(element="{{ element }}", wavelength={{ entry[1] }}, intensity={{ entry[0] }}, flags="{{ entry[2] }}"),
        {%- endfor %}
        ]
    ),
{%- endfor %}
}
