#!/usr/bin/env python3
"""NIST strong lines, autogenerated by helpers/strong_lines_gen.py."""

# pylint: disable=too-many-lines

from dataclasses import dataclass
from enum import Enum

class Flag(Enum):
    BAND_HEAD = ('b', 'band head')
    COMPLEX = ('c', 'complex')
    TWO_UNRES_LINES = ('d', 'line consists of two unresolved lines')
    HAZY = ('h', 'hazy')
    SHADED_LONGER = ('l', 'shaded to longer wavelengths')
    PERSISTENT = ('P', 'a persistent line')
    EASILY_REVERSED = ('r', 'easily reversed')
    SHADED_SHORTER = ('s', 'shaded to shorter wavelengths')
    UNRESOLVED = ('u', 'unresolved shoulder on strong line')
    WIDE = ('w', 'wide')
    TOO_CLOSE = ('*', 'peaks so close that separate intensity measurement was infeasible')

    def __init__(self, code: str, description: str):
        self.code = code
        self.description = description

    def __str__(self):
        """Convert to readable string"""
        return f'{self.code} ({self.description})'

_FLAG_MAP = {flag.code: flag for flag in Flag}

@dataclass
class StrongLine:
    """Represents one strong line for given element."""
    element: str
    wavelength: float
    intensity: int
    raw_flags: str

    def flags(self):
        return [_FLAG_MAP[f] for f in list(self.raw_flags)]

@dataclass
class StrongLines:
    """Represents collection of strong lines for given element."""
    element: str
    lines: list[StrongLine]
    persistent_lines: list[StrongLine]  # lines with 'P' flag

    def for_wavelength_range(self, wave_rng, only_persistent=False):
        """Return list of lines for given wavelength range."""
        src = self.persistent_lines if only_persistent else self.lines
        return [x for x in src if wave_rng.start <= x.wavelength <= wave_rng.stop]

    def for_intensity_range(self, intensity_rng, only_persistent=False):
        """Return list of lines for given intensity range."""
        src = self.persistent_lines if only_persistent else self.lines
        return [x for x in src if intensity_rng.start <= x.intensity <= intensity_rng.stop]

    def for_wavelength_and_intensity_range(self, wave_rng, int_rng, only_persistent=False):
        """Return list of lines for given intensity range."""
        src = self.persistent_lines if only_persistent else self.lines
        return [x for x in src if (
            wave_rng.start <= x.wavelength <= wave_rng.stop and
            int_rng.start <= x.intensity <= int_rng.stop)]

STRONG_LINES = {
{% for element, lines in full_data.items() %}
    "{{ element }}": StrongLines(
        element="{{ element }}",
        lines=[
        {%- for entry in lines %}
            StrongLine(element="{{ element }}", wavelength={{ entry[1] }}, intensity={{ entry[0] }}, raw_flags="{{ entry[2] }}"),
        {%- endfor %}
        ],
        persistent_lines=[
        {%- for entry in lines if 'P' in entry[2] %}
            StrongLine(element="{{ element }}", wavelength={{ entry[1] }}, intensity={{ entry[0] }}, raw_flags="{{ entry[2] }}"),
        {%- endfor %}
        ]
    ),
{%- endfor %}
}
